/// @title Escrow
/// @notice SPDX-License-Identifier: MIT
/// @author floop <https://github.com/0xFloop>
/// @notice Adapted from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/escrow/Escrow.sol)

#include "huffmate/auth/Owned.huff"
#include "huffmate/data-structures/Hashmap.huff"

// Additional Functions
#define function withdraw() nonpayable returns ()
#define function deposit(address) payable returns ()
#define function depositsOf(address) view returns (uint256)

//Events
#define event Withdrawn(address indexed, uint256)
#define event Deposited(address indexed, uint256)

//Deposits mapping slot
#define constant DEPOSITS_SLOT = FREE_STORAGE_POINTER()

//Constructor
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    OWNED_CONSTRUCTOR()
}


/**
* @dev Withdraw accumulated balance for a payee, forwarding all gas to the
* recipient.
*
* WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.
* Make sure you trust the recipient, or are either following the
* checks-effects-interactions pattern or using {ReentrancyGuard}.
*
* @param payee The address whose funds will be withdrawn and transferred to.
*
* Emits a {Withdrawn} event.
*/
#define macro WITHDRAW() = takes(0) returns(0) {
    IS_OWNER()

    0x04 calldataload             //[payee]

    dup1                          //[payee, payee]

    [DEPOSITS_SLOT]               // [DEPOSITS_SLOT, payee, payee]

    LOAD_ELEMENT_FROM_KEYS(0x00)  // [payee deposits, payee]

    swap1                         // [payee, payee deposits]

    0x00                          // [0, payee, payee deposits]

    swap1                         // [payee, 0, payee deposits]

    [DEPOSITS_SLOT]               //[DEPOSITS_SLOT, payee, 0, payee deposits]

    STORE_ELEMENT_FROM_KEYS(0x00) // [payee deposits]


    // send the deposits amount to caller
    
    0x00                           // [retOffset, value]
    0x00                           // [argSize, retOffset, value]
    0x00                           // [argOffset, argSize, retOffset, value]
    0x00                           // [retSize, argOffset, argSize, retOffset, value]
    swap4                          // [value, argOffset, argSize, retOffset, retSize]
    0x04 calldataload              // [to, value, argOffset, argSize, retOffset, retSize]
    gas                            // [gas, to, value, argOffset, argSize, retOffset, retSize]

    call

    stop
}

/// @notice Deposit
/// @notice Deposits msg.value to the payee address
#define macro DEPOSIT() = takes(0) returns(0) {
    // IS_OWNER()

    callvalue                     // [msg.value]

    0x04 calldataload             // [payee, msg.value]

    [DEPOSITS_SLOT]               // [DEPOSITS_SLOT, payee, msg.value]
    
    LOAD_ELEMENT_FROM_KEYS(0x00)  // [payee deposits, msg.value]

    add                           // [payee deposits + msg.value]

    0x04 calldataload             //[payee, payee deposits + msg.value]

    [DEPOSITS_SLOT]               //[DEPOSITS_SLOT, payee, payee deposits + msg.value]

    STORE_ELEMENT_FROM_KEYS(0x00) // []
    
    stop
}

#define macro DEPOSITS_OF() = takes(0) returns(0) {
    0x04 calldataload             //[payee]

    [DEPOSITS_SLOT]               // [DEPOSITS_SLOT, payee]
    
    LOAD_ELEMENT_FROM_KEYS(0x00)  // [payee deposits]

    0x00 mstore                   // []
    0x20 0x00 return 
}

#define macro MAIN() = takes (0) returns (0) {
    // Load the function selector
    pc                            // [0x00]
    calldataload                  // [sigRightPaddedTo32Bytes]
    0xE0                          // [0xE0, sigRightPaddedTo32Bytes]
    shr                           // [sig]

    dup1                          // [sig, sig]
    __FUNC_SIG(withdraw)          // [withdrawSig, sig, sig]
    eq                            // [(sig == withdrawSig), sig]
    withdraw                      // [withdraw, (sig == withdrawSig), sig]
    jumpi                         // [sig]


    dup1                          // [sig, sig]
    __FUNC_SIG(deposit)           // [depositSig, sig, sig]
    eq                            // [(sig == depositSig), sig]
    deposit                       // [deposit, (sig == depositSig), sig]
    jumpi                         // [sig]


    dup1                          // [sig, sig]
    __FUNC_SIG(depositsOf)        // [depositsOfSig, sig, sig]
    eq                            // [(sig == depositSig), sig]
    depositsOf                    // [depositsOf, (sig == depositsOfSig), sig]
    jumpi                         // [sig]


    
    0x00                          //[0x00, sig]
    dup1                          //[0x00, 0x00, sig]
    revert                        //[]

    withdraw:
        WITHDRAW()
    deposit:
        DEPOSIT()
    depositsOf:
        DEPOSITS_OF()
}
